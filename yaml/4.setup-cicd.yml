AWSTemplateFormatVersion: "2010-09-09"
Description: A template for setting up the CI/CD infrastructure

Parameters:
  # Default settings
  ProjectName:
    Type: String

Resources:
  ##########################
  # Set up a VPC endpoint
  ##########################
  Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds: 
        - !ImportValue PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !ImportValue VPC

  ##########################
  # Set up a S3 source bucket
  ##########################
  SourceCodeBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${ProjectName}-source
      VersioningConfiguration: 
        Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  ##########################
  # Set up an IAM role for a lambda function
  ##########################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-cicd-lambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess

 ##########################
  # Set up a security group for a lambda function
  ##########################
  LambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-cicd-lambda-sg
      GroupDescription: Enable access from the NFS protocol to lambda function
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0 #TODO
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-cicd-lambda-sg

  ##########################
  # Set up the lambda function
  ##########################
  LambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: !Sub ${ProjectName}-cicd
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.9
        Handler: index.lambda_handler
        FileSystemConfigs: 
          - Arn:
            LocalMountPath: !Sub /mnt/${FileSystemPath}
        Timeout: 60 
        Events:
          S3Bucket:
            Type: S3
            Properties:
              Bucket: !Ref SourceCodeBucket
              Events: 's3:ObjectCreated:*'
        VpcConfig:
          SecurityGroupIds: 
            - !GetAtt LambdaSG.GroupId
          SubnetIds: 
            - !ImportValue DBSubnet1
            - !ImportValue DBSubnet2
        Code:
          ZipFile: |
            import boto3
            import os
            import shutil

            def lambda_handler(event, context):
                # Retrieve the S3 bucket and key from the event
                s3_bucket = event['Records'][0]['s3']['bucket']['name']
                s3_key = event['Records'][0]['s3']['object']['key']
                
                
                # Set the download path in the /tmp directory
                download_path = '/tmp/' + os.path.basename(s3_key)
                
                # Create an S3 client
                s3_client = boto3.client('s3')
                
                try:
                    # Download the file from S3
                    s3_client.download_file(s3_bucket, s3_key, download_path)
                    print(f"File downloaded: {download_path}")
                except Exception as e:
                    print(f"Error downloading file: {str(e)}")
                
                # Move the file to the /mnt/efs directory
                destination_path = '/mnt/efs/' + os.path.basename(s3_key)
                try:
                    shutil.move(download_path, destination_path)
                    print(f"File moved to: {destination_path}")
                except Exception as e:
                    print(f"Error moving file: {str(e)}")
                    
                print("After : ", os.listdir("/mnt/efs"))

                return {
                    'statusCode': 200,
                    'body': 'File downloaded and moved successfully'
                }



# ADD FILE SYSTEM CONNECTION 



















